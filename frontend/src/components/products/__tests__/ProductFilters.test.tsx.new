
import { render, screen, fireEvent } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { useRouter, useSearchParams } from 'next/navigation';
import { ProductFilters } from '../ProductFilters';

// Mock Next.js navigation
jest.mock('next/navigation', () => ({
  useRouter: jest.fn(),
  useSearchParams: jest.fn(),
}));

const mockPush = jest.fn();
const mockUseRouter = useRouter as jest.MockedFunction<typeof useRouter>;
const mockUseSearchParams = useSearchParams as jest.MockedFunction<typeof useSearchParams>;

const mockSearchParams = {
  get: jest.fn(),
  entries: jest.fn(() => []),
}; 

const mockCategories = [
  {
    id: '1',
    name: 'Electronics',
    description: 'Electronic devices',
    createdAt: '2023-01-01T00:00:00Z',
    updatedAt: '2023-01-01T00:00:00Z',
  },
  {
    id: '2',
    name: 'Clothing',
    description: 'Apparel and accessories',
    createdAt: '2023-01-01T00:00:00Z',
    updatedAt: '2023-01-01T00:00:00Z',
  },
  {
    id: '3',
    name: 'Books',
    description: 'Books and literature',
    createdAt: '2023-01-01T00:00:00Z',
    updatedAt: '2023-01-01T00:00:00Z',
  },
];

describe('ProductFilters', () => {
  beforeEach(() => {
    jest.clearAllMocks();
    
    mockUseRouter.mockReturnValue({
      push: mockPush,
    } as any);
    
    mockUseSearchParams.mockReturnValue(mockSearchParams as any);
    
    // Default search params (no filters)
    mockSearchParams.get.mockImplementation((key) => {
      switch (key) {
        case 'categories': return '';
        case 'category': return '';
        case 'minPrice': return '';
        case 'maxPrice': return '';
        case 'search': return '';
        default: return null;
      }
    });
  });

  it('should render filter components with categories', () => {
    render(<ProductFilters categories={mockCategories} />);
    
    expect(screen.getByText('Categories')).toBeInTheDocument();
    expect(screen.getByText('Price Range')).toBeInTheDocument();
    expect(screen.getByText('Quick Filters')).toBeInTheDocument();
  });

  it('should display provided categories', () => {
    render(<ProductFilters categories={mockCategories} />);
    
    expect(screen.getByText('Electronics')).toBeInTheDocument();
    expect(screen.getByText('Clothing')).toBeInTheDocument();
    expect(screen.getByText('Books')).toBeInTheDocument();
  });

  it('should handle empty categories array', () => {
    render(<ProductFilters categories={[]} />);
    
    expect(screen.getByText('Categories')).toBeInTheDocument();
    expect(screen.getByText('Price Range')).toBeInTheDocument();
    expect(screen.getByText('Quick Filters')).toBeInTheDocument();
  });

  it('should handle category selection', async () => {
    const user = userEvent.setup();
    render(<ProductFilters categories={mockCategories} />);
    
    const electronicsCategory = screen.getByText('Electronics');
    await user.click(electronicsCategory);
    
    expect(mockPush).toHaveBeenCalled();
  });

  it('should handle price range input', async () => {
    const user = userEvent.setup();
    render(<ProductFilters categories={mockCategories} />);
    
    const minPriceInput = screen.getByPlaceholderText('Min');
    const maxPriceInput = screen.getByPlaceholderText('Max');
    
    await user.type(minPriceInput, '50');
    await user.type(maxPriceInput, '200');
    
    expect(minPriceInput).toHaveValue('50');
    expect(maxPriceInput).toHaveValue('200');
  });

  it('should handle apply filters button', async () => {
    const user = userEvent.setup();
    render(<ProductFilters categories={mockCategories} />);
    
    const minPriceInput = screen.getByPlaceholderText('Min');
    const maxPriceInput = screen.getByPlaceholderText('Max');
    const applyButton = screen.getByText('Apply Filters');
    
    await user.type(minPriceInput, '50');
    await user.type(maxPriceInput, '200');
    await user.click(applyButton);
    
    expect(mockPush).toHaveBeenCalled();
  });

  it('should handle clear filters button', async () => {
    const user = userEvent.setup();
    render(<ProductFilters categories={mockCategories} />);
    
    const clearButton = screen.getByText('Clear All');
    await user.click(clearButton);
    
    expect(mockPush).toHaveBeenCalled();
  });

  it('should show current category filter from URL', () => {
    mockSearchParams.get.mockImplementation((key) => {
      if (key === 'category') return 'Electronics';
      return '';
    });
    
    render(<ProductFilters categories={mockCategories} />);
    
    // The currently selected category should be highlighted
    const electronicsOption = screen.getByText('Electronics');
    expect(electronicsOption.closest('label')).toHaveClass('text-primary-600');
  });

  it('should handle quick filter buttons', async () => {
    const user = userEvent.setup();
    render(<ProductFilters categories={mockCategories} />);
    
    const quickFilterButtons = screen.getAllByRole('button');
    const priceButton = quickFilterButtons.find(button => 
      button.textContent?.includes('Under $50')
    );
    
    if (priceButton) {
      await user.click(priceButton);
      expect(mockPush).toHaveBeenCalled();
    }
  });

  it('should preserve existing search params when applying filters', async () => {
    const user = userEvent.setup();
    
    mockSearchParams.get.mockImplementation((key) => {
      if (key === 'search') return 'laptop';
      return '';
    });
    
    mockSearchParams.entries.mockReturnValue([['search', 'laptop']]);
    
    render(<ProductFilters categories={mockCategories} />);
    
    const electronicsCategory = screen.getByText('Electronics');
    await user.click(electronicsCategory);
    
    expect(mockPush).toHaveBeenCalled();
  });
});
