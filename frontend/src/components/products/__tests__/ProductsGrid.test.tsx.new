import { render, screen } from '@testing-library/react';
import { ProductsGrid } from '../ProductsGrid';

// Mock ProductCard component
jest.mock('../ProductCard', () => ({
  ProductCard: ({ product }: { product: any }) => (
    <div data-testid={`product-${product.id}`}>
      <h3>{product.name}</h3>
      <p>${product.price}</p>
      <p>{product.category}</p>
    </div>
  ),
}));

const mockProducts = [
  {
    id: '1',
    name: 'Laptop',
    price: 999,
    category: 'Electronics',
    description: 'High-performance laptop',
    imageUrl: 'laptop.jpg',
    images: ['laptop.jpg'],
    stock: 10,
    rating: 4.5,
    reviewCount: 25,
    features: ['Feature 1'],
    createdAt: '2023-01-01T00:00:00Z',
    updatedAt: '2023-01-01T00:00:00Z',
  },
  {
    id: '2',
    name: 'T-Shirt',
    price: 29,
    category: 'Clothing',
    description: 'Comfortable cotton t-shirt',
    imageUrl: 'tshirt.jpg',
    images: ['tshirt.jpg'],
    stock: 15,
    rating: 4.0,
    reviewCount: 10,
    features: ['Feature 1'],
    createdAt: '2023-01-01T00:00:00Z',
    updatedAt: '2023-01-01T00:00:00Z',
  },
  {
    id: '3',
    name: 'Book',
    price: 15,
    category: 'Books',
    description: 'Educational book',
    imageUrl: 'book.jpg',
    images: ['book.jpg'],
    stock: 20,
    rating: 5.0,
    reviewCount: 5,
    features: ['Feature 1'],
    createdAt: '2023-01-01T00:00:00Z',
    updatedAt: '2023-01-01T00:00:00Z',
  },
];

describe('ProductsGrid', () => {
  it('should render products grid when products are provided', () => {
    render(<ProductsGrid products={mockProducts} />);
    
    expect(screen.getByTestId('product-1')).toBeInTheDocument();
    expect(screen.getByTestId('product-2')).toBeInTheDocument();
    expect(screen.getByTestId('product-3')).toBeInTheDocument();
  });

  it('should display products in correct grid layout', () => {
    render(<ProductsGrid products={mockProducts} />);
    
    const gridContainer = document.querySelector('.grid.grid-cols-1.md\\:grid-cols-2.lg\\:grid-cols-3.gap-6');
    expect(gridContainer).toBeInTheDocument();
  });

  it('should render ProductCard for each product', () => {
    render(<ProductsGrid products={mockProducts} />);
    
    expect(screen.getByText('Laptop')).toBeInTheDocument();
    expect(screen.getByText('$999')).toBeInTheDocument();
    expect(screen.getByText('Electronics')).toBeInTheDocument();
    
    expect(screen.getByText('T-Shirt')).toBeInTheDocument();
    expect(screen.getByText('$29')).toBeInTheDocument();
    expect(screen.getByText('Clothing')).toBeInTheDocument();
    
    expect(screen.getByText('Book')).toBeInTheDocument();
    expect(screen.getByText('$15')).toBeInTheDocument();
    expect(screen.getByText('Books')).toBeInTheDocument();
  });

  it('should show empty state when no products are provided', () => {
    render(<ProductsGrid products={[]} />);
    
    expect(screen.getByText('No products found')).toBeInTheDocument();
    expect(screen.getByText('Try adjusting your search or filter criteria.')).toBeInTheDocument();
    
    // Check for the empty state icon
    const emptyIcon = document.querySelector('svg');
    expect(emptyIcon).toBeInTheDocument();
    expect(emptyIcon).toHaveClass('mx-auto', 'h-12', 'w-12', 'text-gray-400');
  });

  it('should show empty state when products is undefined', () => {
    render(<ProductsGrid products={undefined as any} />);
    
    expect(screen.getByText('No products found')).toBeInTheDocument();
    expect(screen.getByText('Try adjusting your search or filter criteria.')).toBeInTheDocument();
  });

  it('should show empty state when products is null', () => {
    render(<ProductsGrid products={null as any} />);
    
    expect(screen.getByText('No products found')).toBeInTheDocument();
    expect(screen.getByText('Try adjusting your search or filter criteria.')).toBeInTheDocument();
  });

  it('should handle single product correctly', () => {
    const singleProduct = [mockProducts[0]];
    render(<ProductsGrid products={singleProduct} />);
    
    expect(screen.getByTestId('product-1')).toBeInTheDocument();
    expect(screen.queryByTestId('product-2')).not.toBeInTheDocument();
    expect(screen.queryByTestId('product-3')).not.toBeInTheDocument();
  });

  it('should render empty state with correct text styling', () => {
    render(<ProductsGrid products={[]} />);
    
    const heading = screen.getByText('No products found');
    expect(heading).toHaveClass('text-lg', 'font-medium', 'text-gray-900', 'mb-2');
    
    const description = screen.getByText('Try adjusting your search or filter criteria.');
    expect(description).toHaveClass('text-gray-500');
  });
});
