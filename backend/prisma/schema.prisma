// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      String   @default("USER") // "USER" or "ADMIN"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  cart    Cart?
  orders  Order[]
  reviews Review[]

  @@map("users")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  imageUrl    String
  category    String
  stock       Int      @default(0)
  rating      Float    @default(0)
  reviewCount Int      @default(0)
  features    String   // JSON string
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  cartItems  CartItem[]
  orderItems OrderItem[]
  reviews    Review[]

  @@map("products")
}

model Cart {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  items CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("carts")
}

model CartItem {
  id        String @id @default(cuid())
  cartId    String
  productId String
  quantity  Int

  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId])
  @@map("cart_items")
}

model Order {
  id     String @id @default(cuid())
  userId String
  status String @default("PENDING") // "PENDING", "CONFIRMED", "SHIPPED", "DELIVERED", "CANCELLED"

  totalAmount Float

  // Address information
  shippingFirstName String
  shippingLastName  String
  shippingAddress1  String
  shippingAddress2  String?
  shippingCity      String
  shippingState     String
  shippingZipCode   String
  shippingCountry   String
  shippingPhone     String?

  billingFirstName String
  billingLastName  String
  billingAddress1  String
  billingAddress2  String?
  billingCity      String
  billingState     String
  billingZipCode   String
  billingCountry   String
  billingPhone     String?

  user  User        @relation(fields: [userId], references: [id])
  items OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("orders")
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float // Price at the time of order

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())

  @@map("order_items")
}

model Review {
  id        String @id @default(cuid())
  userId    String
  productId String
  rating    Int // 1-5 stars
  comment   String?

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
  @@map("reviews")
}
